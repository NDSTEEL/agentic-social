name: Production Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run comprehensive test suite
        run: |
          npm run test:unit
          npm run test:integration
          npm run test:e2e:headless
          npm run test:performance
          
      - name: Security audit
        run: |
          npm audit --audit-level high
          
      - name: TypeScript strict check
        run: |
          npm run type-check:strict
          
      - name: Code quality check
        run: |
          npm run lint
          npm run format:check
          
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    environment: production
    if: needs.test.result == 'success' || github.event.inputs.force_deploy == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Create deployment tag
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git tag -a "v$(date +%Y%m%d-%H%M%S)" -m "Production deployment: ${{ github.event.head_commit.message }}"
          git push origin --tags
          
      - name: Build optimized backend image
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
          docker build -t agentic-social-api:latest -f apps/api/Dockerfile --target production .
          docker tag agentic-social-api:latest ${{ secrets.ECR_REGISTRY }}/agentic-social-api:latest
          docker tag agentic-social-api:latest ${{ secrets.ECR_REGISTRY }}/agentic-social-api:$(git rev-parse --short HEAD)
          docker push ${{ secrets.ECR_REGISTRY }}/agentic-social-api:latest
          docker push ${{ secrets.ECR_REGISTRY }}/agentic-social-api:$(git rev-parse --short HEAD)
          
      - name: Update ECS task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition agentic-social-api-prod \
            --query taskDefinition > task-definition.json
            
          # Update image URI in task definition
          jq '.containerDefinitions[0].image = "${{ secrets.ECR_REGISTRY }}/agentic-social-api:latest"' task-definition.json > updated-task-definition.json
          
          # Remove unnecessary fields
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' updated-task-definition.json > final-task-definition.json
          
      - name: Deploy backend to ECS Production
        run: |
          aws ecs register-task-definition --cli-input-json file://final-task-definition.json
          
          aws ecs update-service \
            --cluster agentic-social-production \
            --service agentic-social-api-production \
            --task-definition agentic-social-api-prod \
            --desired-count 2
            
      - name: Wait for deployment stability
        run: |
          aws ecs wait services-stable \
            --cluster agentic-social-production \
            --services agentic-social-api-production \
            --cli-read-timeout 900
            
      - name: Run database migrations (if needed)
        run: |
          # Check if migrations are needed
          MIGRATION_COUNT=$(docker run --rm \
            -e DATABASE_URL="${{ secrets.PRODUCTION_DATABASE_URL }}" \
            ${{ secrets.ECR_REGISTRY }}/agentic-social-api:latest \
            npm run db:migration:status | grep -c "pending" || echo "0")
            
          if [ "$MIGRATION_COUNT" -gt "0" ]; then
            echo "Running $MIGRATION_COUNT pending migrations..."
            docker run --rm \
              -e DATABASE_URL="${{ secrets.PRODUCTION_DATABASE_URL }}" \
              ${{ secrets.ECR_REGISTRY }}/agentic-social-api:latest \
              npm run db:migrate
          else
            echo "No migrations needed"
          fi
          
      - name: Deploy frontend to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod --confirm'
          working-directory: ./apps/web
          scope: ${{ secrets.VERCEL_ORG_ID }}
          alias-domains: app.agentic-social.com
          
  health-checks:
    runs-on: ubuntu-latest
    needs: deploy-production
    steps:
      - name: API Health Check
        run: |
          echo "Checking API health..."
          for i in {1..10}; do
            if curl -f -s "${{ secrets.PRODUCTION_API_URL }}/health"; then
              echo "API is healthy!"
              break
            else
              echo "Attempt $i failed, retrying in 30s..."
              sleep 30
            fi
            if [ $i -eq 10 ]; then
              echo "API health check failed after 10 attempts"
              exit 1
            fi
          done
          
      - name: Frontend Health Check
        run: |
          echo "Checking frontend health..."
          curl -f -s "https://app.agentic-social.com" > /dev/null
          echo "Frontend is healthy!"
          
      - name: Voice Processing Health Check
        run: |
          echo "Checking voice processing..."
          curl -f -s "${{ secrets.PRODUCTION_API_URL }}/health/voice" > /dev/null
          echo "Voice processing is healthy!"
          
      - name: Database Health Check
        run: |
          echo "Checking database connection..."
          curl -f -s "${{ secrets.PRODUCTION_API_URL }}/health/db" > /dev/null
          echo "Database is healthy!"
          
  smoke-tests:
    runs-on: ubuntu-latest
    needs: health-checks
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run production smoke tests
        run: |
          npm run test:smoke:production
        env:
          TEST_BASE_URL: https://app.agentic-social.com
          PRODUCTION_API_URL: ${{ secrets.PRODUCTION_API_URL }}
          
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production, health-checks, smoke-tests]
    if: always()
    steps:
      - name: Success Notification
        if: needs.deploy-production.result == 'success' && needs.health-checks.result == 'success' && needs.smoke-tests.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#agentic-social-prod'
          text: |
            ðŸš€ **Production Deployment Successful!**
            
            **App URL**: https://app.agentic-social.com
            **API URL**: ${{ secrets.PRODUCTION_API_URL }}
            **Deploy Tag**: v$(date +%Y%m%d-%H%M%S)
            **Commit**: ${{ github.event.head_commit.message }}
            
            âœ… Backend deployed and scaled to 2 instances
            âœ… Frontend deployed to Vercel
            âœ… All health checks passed
            âœ… Smoke tests successful
            
            The new features are now live! ðŸŽ‰
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Failure Notification
        if: needs.deploy-production.result == 'failure' || needs.health-checks.result == 'failure' || needs.smoke-tests.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#agentic-social-alerts'
          text: |
            ðŸš¨ **PRODUCTION DEPLOYMENT FAILED**
            
            **Branch**: `main`
            **Commit**: ${{ github.event.head_commit.message }}
            **Logs**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            @channel Please investigate immediately!
            
            **Rollback**: Use previous task definition in ECS console if needed
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}