name: Staging Deployment

on:
  push:
    branches: [staging]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci
          
      - name: Run full test suite
        run: |
          npm run test:unit
          npm run test:integration
          npm run test:e2e:headless
          
      - name: TypeScript type checking
        run: |
          npm run type-check
          
      - name: Linting
        run: |
          npm run lint
          
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Build and push backend image
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
          docker build -t agentic-social-api:staging -f apps/api/Dockerfile .
          docker tag agentic-social-api:staging ${{ secrets.ECR_REGISTRY }}/agentic-social-api:staging
          docker push ${{ secrets.ECR_REGISTRY }}/agentic-social-api:staging
          
      - name: Deploy backend to ECS Staging
        run: |
          aws ecs update-service \
            --cluster agentic-social-staging \
            --service agentic-social-api-staging \
            --force-new-deployment \
            --desired-count 1
            
      - name: Wait for backend deployment
        run: |
          aws ecs wait services-stable \
            --cluster agentic-social-staging \
            --services agentic-social-api-staging
            
      - name: Run database migrations
        run: |
          docker run --rm \
            -e DATABASE_URL="${{ secrets.STAGING_DATABASE_URL }}" \
            ${{ secrets.ECR_REGISTRY }}/agentic-social-api:staging \
            npm run db:migrate
            
      - name: Deploy frontend to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod --confirm'
          working-directory: ./apps/web
          scope: ${{ secrets.VERCEL_ORG_ID }}
          alias-domains: staging.agentic-social.com
          
  integration-tests:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run E2E tests against staging
        run: |
          npm run test:e2e:staging
        env:
          TEST_BASE_URL: https://staging.agentic-social.com
          STAGING_API_URL: ${{ secrets.STAGING_API_URL }}
          
      - name: Voice processing integration test
        run: |
          npm run test:voice:staging
        env:
          ELEVENLABS_TEST_KEY: ${{ secrets.ELEVENLABS_STAGING_KEY }}
          
      - name: Content generation integration test
        run: |
          npm run test:content:staging
        env:
          KIEAI_TEST_KEY: ${{ secrets.KIEAI_STAGING_KEY }}
          
  notify:
    runs-on: ubuntu-latest
    needs: [build-and-deploy, integration-tests]
    if: always()
    steps:
      - name: Slack Notification - Success
        if: needs.build-and-deploy.result == 'success' && needs.integration-tests.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#agentic-social-staging'
          text: |
            ðŸŽ‰ **Staging Deployment Successful!**
            
            **URL**: https://staging.agentic-social.com
            **API**: ${{ secrets.STAGING_API_URL }}
            **Commit**: ${{ github.event.head_commit.message }}
            
            âœ… All integration tests passed
            âœ… Voice processing working
            âœ… Content generation working
            
            Ready for QA testing! ðŸš€
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Slack Notification - Failure
        if: needs.build-and-deploy.result == 'failure' || needs.integration-tests.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#agentic-social-alerts'
          text: |
            ðŸš¨ **Staging Deployment Failed**
            
            **Branch**: `staging`
            **Commit**: ${{ github.event.head_commit.message }}
            **Logs**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            Please check the logs and fix the issues.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}